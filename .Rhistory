fit<-lm(y~x)
summary(fit)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y~x)
summary(fit)
mean(mtcars$wt)
newx=data.frame(x=3.21725)
p1=data.frame(predict(fit,newdata=newx,interval=("confidence")))
p2=data.frame(predict(fit,newdata=newx,interval=("prediction")))
p1$interval="confidence"
p2$interval="prediction"
p1$x=newx$x
p2$x=newx$x
dat=rbind(p1,p2)
names(dat)[1]="y"
dat
newx=data.frame(x=3)
p1=data.frame(predict(fit,newdata=newx,interval=("confidence")))
> p2=data.frame(predict(fit,newdata=newx,interval=("prediction")))
> p1$interval="confidence"
> p2$interval="prediction"
> p1$x=newx$x
> p2$x=newx$x
> dat=rbind(p1,p2)
> names(dat)[1]="y"
> dat
p1=data.frame(predict(fit,newdata=newx,interval=("confidence")))
p1
p2=data.frame(predict(fit,newdata=newx,interval=("prediction")))
p1$interval="confidence"
> p2$interval="prediction"
p1$interval="confidence"
p2$interval="prediction"
p1
p2
x<-mtcars$wt*3/2
fit<-lm(y~x)
fit
summary(fit)
sumCoef <- summary(fit)$coefficients
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2])
x<-mtcars$wt/2
fit<-lm(y~x)
sumCoef <- summary(fit)$coefficients
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2])
x<-mtcars$wt
fit<-lm(y~x)
fit
summary(fit)
fit2<-lm(y~x-1)
summary(fit2)
(3.046/11.27)
data(mtcars)
fit<-lm(mpg ` I(wt * 0.5) + factor(cyl),data=mtcars)
summary(fit)
]
;
""
''
`
summary(fit)
fit<-lm(mpg ~ I(wt * 0.5) + factor(cyl),data=mtcars)
summary(fit)
fit<-lm(mpg ~ I(wt * 2) + factor(cyl),data=mtcars)
summary(fit)
require(datasets); data(mtcars)
fit1<-lm(mpg ~ .,data=mtcars)
r<-resid(fit1)
r
ggplot(r)
require(ggplot2)
ggplot(r)
row.names(r)
print row.names(r)
print(row.names(r))
?lm
?resid
?lm
g1<-ggplot(resid(fit1))
g1<-ggplot(fit1,aes(x=fitted.values,y=residuals))
g1
g1<-ggplot(fit1,aes(x=fitted.values,y=residuals))
g1<-g1+geom_point(size=7,colour="black",alpha=0.5)
g1
fit1$fitted.values
?lm
g1<-ggplot(fit1,aes(x=x,y=residuals))
g1<-g1+geom_point(size=7,colour="black",alpha=0.5)
g1
g1<-ggplot(fit1,aes(x=x,y=residuals))
g1<-g1+geom_smooth(method="lm",colour="black")
g1
g1
g1<-ggplot(fit1,aes(x=x,y=residuals)) + geom_point()
g1
g1
?lm
fit1$x
fit1$terms
fit1$fitted.values
fit1$x
fit1$g1<-ggplot(fit1,aes(x=fitted.values,y=residuals)) + geom_point()
g1<-ggplot(fit1,aes(x=fitted.values,y=residuals)) + geom_point()
g1
fit1$fitted.values
fit1$residuals
ggplot(fit1,aes(x=fitted.values[1],y=residuals)) + geom_point()
ggplot(fit1,aes(x=fitted.values,y=residuals)) + geom_point()
size(fit1$residuals)
length(fit1$residuals)
length(fit1$fitted.values)
ggplot(resid(fit1))
ggplot(fit1,aes(y=residuals))
ggplot(fit1,aes(y=residuals)) + geom_point()
r<-data.frame(x=fit1$fitted.values,y=fit1$residuals)
ggplot(r,aes(x=X,y=Y)) + geom_point()
r<-data.frame(x=fit1$fitted.values,y=fit1$residuals)
ggplot(r,aes(x=X,y=Y)) + geom_point()
r<-data.frame(x=fit1$fitted.values,y=fit1$residuals)
ggplot(r) + geom_point()
ggplot(r,aes(x=x,y=y)) + geom_point()
min(fit1$residuals)
max(fit1$residuals)
data(MASS)
library(MASS)
shuttle
?shuttle
fits = glm(shuttle$use ~ shuttle$wind,family="binomial")
summary(fits)
exp(coef(fits))
fits = glm(shuttle$use ~ shuttle$wind + shuttle$magn,family="binomial")
summary(fits)
exp(coef(fits))
shuttle$magn
fits = glm(shuttle$use ~ shuttle$wind,family="binomial")
adjust(adjust=magn,fits)
library(epicalc)
install.packages(epicalc)
data(InsectSprays)
InsectSprays
fit<-glm(count~spray,family="poisson")
fit<-glm(count~spray,family="poisson",data=InsectSprays)
summary(fit)
exp(coef(fits))
exp(coef(fit))
1/exp(coef(fit))
fit<-glm(count~spray+offset(2),family="poisson",data=InsectSprays)
fit<-glm(count~spray+2,family="poisson",data=InsectSprays)
t<-2
fit<-glm(count~offset(t),family="posson",data=InsectSprays)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y,x)
plot(x,y)
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
fit<-lm(child ~ parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coefficients
ols.ic <- fit$coef[1]
ols.ic <- fit$coef[2]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-est(ols.sllpe,ols.ic)
varEst<-est(ols.slope,ols.ic)
varEst<-var(est(ols.slope,ols.ic))
all.equal(varChild,varRes+varEst)
efit<-lm(accel~mag+dist,attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor<-lm(gpa_nor~gch_nor)
l_nor<-lm(gch_nor ~ gpa_nor)
fit<-lm(child ~ parent,galton)
1/(n-2)*(fit$residuals^2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-(galton$child-mu)
sTot<-(galton$child-mu)^2
sTot<-sum((galton$child-mu)^2)
sRes<-sum((fit$residuals)^2)
sRes<-deviance(fit)
1-(sRes/sTot)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child,galton$parent)^2
library(caret)
install.packages(caret)
install.packages("caret")
library(AppliedPrectiveModeling)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
summary(training$Superplasticizer)
plot(log(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?subset
t<-start_with_IL <- training $in$ grep("IL+",training,value=TRUE)
t<-start_with_IL <- training %in% grep("IL+",training,value=TRUE)
t<-start_with_IL <- training %in% grep("IL_",training,value=TRUE)
t
t<-start_with_IL <- training %in% grep("IL",training,value=TRUE)
t
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?cut2
library(Hmisc)
View(training)
?cut2
qplot(training$CompressiveStrength)
?qplot
1:10
qplot(1:774,training$CompressiveStrength)
?qplot
qplot(1:774,CompressiveStrength,data=training,colour=Age)
qplot(1:774,CompressiveStrength,data=training,colour=FlyAsh)
qplot(1:774,CompressiveStrength,data=training,colour=Cement)
qplot(1:774,CompressiveStrength,data=training,colour=BlastFurnaceSlag)
qplot(1:774,CompressiveStrength,data=training,colour=Water)
qplot(1:774,CompressiveStrength,data=training,colour=Superplasticizer)
qplot(1:774,CompressiveStrength,data=training,colour=CourseAggregate)
qplot(1:774,CompressiveStrength,data=training,colour=CourseAggregate)
qplot(1:774,CompressiveStrength,data=training,colour=CoarseAggregate)
qplot(1:774,CompressiveStrength,data=training,colour=FineAggregate)
qplot(SuperPlasticizer,data=training)
qplot(Superplasticizer,data=training)
qplot(log(Superplasticizer+1),data=training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?subset
nm <- rownames(training)
start_with_il <- nm %in% grep("^IL",nm,value=TRUE)
t<-subset(training,start_with_il)
View(t)
start_il <- grep("^IL",nm)
start_il
View(training)
t<-subset(training,grepl("^IL",nm),diagnosis:Resistin)
View(t)
start_with_il
nm
row.names(training)
?row.names
rownames(training)
names(training)
nm<-names(training)
start_with_il <- nm %in% grep("^IL",nm,value=TRUE)
start_with_il
t<-subset(training,start_with_il)
t<-subset(training,starts_with_il)
start_with_il
nm<-names(training)
start_with_il<-grep("^IL",nm,value=TRUE)
start_with_il
t<-subset(training,start_with_il)
start_with_il <- nm %in% grep("^IL",nm,value=TRUE)
start_with_il
t<-subset(training,start_with_il)
View(t)
?subset
t<-subset(training,select=start_with_il)
t<-subset(training,select = start_with_il)
View(t)
?preprocess
?preProcess
a<-preProcess(t,thres=0.90)
a<-preProcess(t,method=pca,thres=0.90)
a<-preProcess(t,method="pca",thres=0.90)
a
t2<-cbind(training$diagnosis,t)
View(t2)
?predict
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
View(segmentationOriginal)
test<-subset(segmentationOriginal,Case=Test)
train<-subset(segmentationOriginal,Case=Train)
set.seed(125)
?rpart
fit1<-rpart(Class~.,data=train)
fit1<-rpart(Class~.,data=train)
?rpart
rpart()
library(rpart)
fit1<-rpart(Class~.,data=train)
plot(fit1)
summary(fit1)
plotcp(fit1)
plot(fit1)
?subset
f<-subset(train,TotalIntech2=23000)
f<-subset(train,TotalIntech2=23000,FiberWidthCh1=10)
f<-subset(train,TotalIntech2==23000,FiberWidthCh1==10)
train[TotalIntech2==23000,]
f<-subset(train,TotalIntech2==23000 & FiberWidthCh1==10 & PerimStatusCh1==2)
f<-subset(train,TotalIntench2==23000)
f<-subset(train,FiberWidthCh1==10)
f<-row.names(train)
grep("Total",f)
grep("Total",f,value=TRUE)
f
f<-rownames(train)
grep(f,"Total",value=TRUE)
f
f<-rownames(segmentationOriginal)
f
prp(fit1)
rpart.plot(fit1)
library(rpart.plot)
library(rpart)
fit1
rpart.plot(fit1)
library(rpart.plot)
install.packages(rpart.plot)
install.packages("rpart.plot")
rpart.plot(fit1)
library(rpart.plot)
rpart.plot(fit1)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive=olive[,-1]
data(olive)
olive=olive[,-1]
View(olive)
fit2<-rpart(Area~.,data=olive)
newdata=as.data.frame(t(colMeans(olive)))
predict(fit2,newdata)
?tree
library(tree)
install.packages(tree)
install.packages("tree")
library(tree)
?tree
fit2<-tree(Area~.,data=olive)
predict(fit2,data=newdata)
newdata
predict(fit2,newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
?glm
View(trainSA)
fit3<-glm(chd~family=binomial,data=trainSAasdf)
?SAheart
fit3<-glm(chd~age+alcohol+obesity+tobacco+types+ldl,family=binomial,data=trainSA)
fit3<-glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family=binomial,data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
tp<-predict(fit3,train)
trainx<-subset(trainSA,sbp:age)
trainx<-subset(trainSA,select=sbp:age)
tp<-predict(fit3,trainx)
missClass(trainSA$chd,tp)
View(trainx)
testx<-subset(testSA,select=sbp:age)
testp<-predict(fit3,testx)
misClass(testSA$chd,testp)
missClass(testSA$chd,testp)
set.seed(13234)
fit3<-glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family=binomial,data=trainSA)
testx<-subset(testSA,select=sbp:age)
testp<-predict(fit3,testx)
missClass(testSA$chd,testp)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vt<-vowel.train
vtest<-vowel.test
View(vt)
vt$y<-factor(vt$y)
vtest$y<-factor(vtest$y)
set.seed(33833)
fit4<-randomForest(y~.,data=vt)
set.seed(33833)
fit4<-train(y~.,data=vt,method="rf",prox=TRUE)
install.packages("e1071")
set.seed(33833)
fit4<-train(y~.,data=vt,method="rf",prox=TRUE)
varImp(fit4)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
print("Start")
train<-subset(segmentationOriginal,Case=Train)
test<-subset(segmentationOriginal,Case=Test)
set.seed(125)
fit1<-rpart(Case~.,data=train)
library(rpart)
set.seed(125)
fit1<-rpart(Case~.,data=train)
plot(fit1)
rpart.plot(fit1)
library(rpart.plot)
rpart.plot(fit1)
View(segmentationOriginal)
View(train)
train<-subset(segmentationOriginal,Case==Train)
train<-subset(segmentationOriginal,Case="Train")
?predict
?dgamma
?mean
?colSums
?show
?lm
predict
dgamma
mean
colSums
show
lm
predict
installed.packages()
predict
dgamma
mean
colSums
show
lm
?showMethods
?getMethod
setwd('products')
install.packages('shiny')
library('shiny')
